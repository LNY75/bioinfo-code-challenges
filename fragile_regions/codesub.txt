greedySorting.go: 

/*
Input: A permutation P.
Output: The sequence of permutations corresponding to applying GreedySorting to P, ending with the identity permutation.
*/
package main

import (
	"fmt"
	"os"
	"strconv"
	"strings"
)

// returns the input permutation as an array of int
func ReadInput(input string) []int {
	content, err := os.ReadFile(input)
	if err != nil {
		panic("cannot open file")
	}
	contentStr := string(content)
	lines := strings.Split(contentStr, "\n")
	pStr := strings.Fields(lines[0])
	p := make([]int, len(pStr))
	for i, s := range pStr {
		n, err := strconv.Atoi(string(s[1:]))
		if err != nil {
			panic("cannot convert this string to int")
		}
		if s[0] == '-' {
			p[i] = -n
		} else {
			p[i] = n
		}
	}
	return p
}

func PrintPermutation(p []int) {
	fmt.Print("")
	for i, n := range p {
		if i == len(p)-1 {
			if n > 0 {
				fmt.Print("+", n, "")
			} else {
				fmt.Print(n, "")
			}
			fmt.Println()
		} else {
			if n > 0 {
				fmt.Print("+", n, " ")
			} else {
				fmt.Print(n, " ")
			}
		}
	}
}

// perform greedy sorting on the permutation
func GreedySorting(p []int) []int {
	steps := 0
	for i := range p {
		for p[i] != i+1 {
			if p[i] == -i-1 {
				p = Reverse(p, i)
				steps++
			} else {
				// find p[j] = i
				for j := i; j < len(p); j++ {
					if p[j] == i+1 || p[j] == -i-1 {
						p = ReverseSubList(p, i, j)
						steps++
						break
					}
				}
			}
		}
	}
	fmt.Println(steps)
	return p
}

// reverse swap the sublist in p from i to j (inclusive)
func ReverseSubList(p []int, i, j int) []int {
	for k := i; k <= (i+j)/2; k++ {
		p = ReverseSwap(p, k, j-(k-i))
	}
	PrintPermutation(p)
	return p
}

// Reverse swap two elements in the permutation p at index i and j
func ReverseSwap(p []int, i, j int) []int {
	tmp := p[i]
	p[i] = -p[j]
	p[j] = -tmp
	return p
}

// reverse the sign of the i-th element in permutaion p
func Reverse(p []int, i int) []int {
	p[i] = -p[i]
	PrintPermutation(p)
	return p
}

func main() {
	input := "input.txt"
	p := ReadInput(input)
	// PrintPermutation(p)
	// ReverseSwap(p, 1, 2)
	// Reverse(p, 3)
	GreedySorting(p)
}

breakPoints.go: 

/*
Number of Breakpoints Problem: Find the number of breakpoints in a permutation.

Input: A permutation.
Output: The number of breakpoints in this permutation.
*/
package main

import (
	"fmt"
	"os"
	"strconv"
	"strings"
)

// returns a modified input permutation as an array of int
// modified: 0 and len(p) are respectively added to the beginning and the end of the permutation
func ReadInput(input string) []int {
	content, err := os.ReadFile(input)
	if err != nil {
		panic("cannot open file")
	}
	contentStr := string(content)
	lines := strings.Split(contentStr, "\n")
	pStr := strings.Fields(lines[0])
	p := make([]int, len(pStr)+2)
	p[0] = 0
	p[len(pStr)+1] = len(pStr) + 1
	for i := 1; i <= len(pStr); i++ {
		s := pStr[i-1]
		n, err := strconv.Atoi(string(s[1:]))
		if err != nil {
			panic("cannot convert this string to int")
		}
		if s[0] == '-' {
			p[i] = -n
		} else {
			p[i] = n
		}
	}
	return p
}

func PrintPermutation(p []int) {
	fmt.Print("")
	for i, n := range p {
		if i == len(p)-1 {
			if n > 0 {
				fmt.Print("+", n, "")
			} else {
				fmt.Print(n, "")
			}
			fmt.Println()
		} else {
			if n > 0 {
				fmt.Print("+", n, " ")
			} else {
				fmt.Print(n, " ")
			}
		}
	}
}

// count the number of break points in the permutation
func countBreakPoints(p []int) int {
	c := 0
	for i := 0; i < len(p)-1; i++ {
		if p[i+1]-p[i] != 1 {
			c++
		}
	}
	return c
}

func main() {
	input := "input2.txt"
	p := ReadInput(input)
	// PrintPermutation(p)
	fmt.Println(countBreakPoints(p))
}


twoBreakDistance.go: 

/*
Input: A permutation P.
Output: The sequence of permutations corresponding to applying GreedySorting to P, ending with the identity permutation.
*/
package main

import (
	"fmt"
	"os"
	"strconv"
	"strings"
)

// returns the input permutation as an array of int
func ReadInput(input string) []int {
	content, err := os.ReadFile(input)
	if err != nil {
		panic("cannot open file")
	}
	contentStr := string(content)
	lines := strings.Split(contentStr, "\n")
	pStr := strings.Fields(lines[0])
	p := make([]int, len(pStr))
	for i, s := range pStr {
		n, err := strconv.Atoi(string(s[1:]))
		if err != nil {
			panic("cannot convert this string to int")
		}
		if s[0] == '-' {
			p[i] = -n
		} else {
			p[i] = n
		}
	}
	return p
}

func PrintPermutation(p []int) {
	fmt.Print("")
	for i, n := range p {
		if i == len(p)-1 {
			if n > 0 {
				fmt.Print("+", n, "")
			} else {
				fmt.Print(n, "")
			}
			fmt.Println()
		} else {
			if n > 0 {
				fmt.Print("+", n, " ")
			} else {
				fmt.Print(n, " ")
			}
		}
	}
}

// perform greedy sorting on the permutation
func GreedySorting(p []int) []int {
	steps := 0
	for i := range p {
		for p[i] != i+1 {
			if p[i] == -i-1 {
				p = Reverse(p, i)
				steps++
			} else {
				// find p[j] = i
				for j := i; j < len(p); j++ {
					if p[j] == i+1 || p[j] == -i-1 {
						p = ReverseSubList(p, i, j)
						steps++
						break
					}
				}
			}
		}
	}
	fmt.Println(steps)
	return p
}

// reverse swap the sublist in p from i to j (inclusive)
func ReverseSubList(p []int, i, j int) []int {
	for k := i; k <= (i+j)/2; k++ {
		p = ReverseSwap(p, k, j-(k-i))
	}
	PrintPermutation(p)
	return p
}

// Reverse swap two elements in the permutation p at index i and j
func ReverseSwap(p []int, i, j int) []int {
	tmp := p[i]
	p[i] = -p[j]
	p[j] = -tmp
	return p
}

// reverse the sign of the i-th element in permutaion p
func Reverse(p []int, i int) []int {
	p[i] = -p[i]
	PrintPermutation(p)
	return p
}

func main() {
	input := "input.txt"
	p := ReadInput(input)
	// PrintPermutation(p)
	// ReverseSwap(p, 1, 2)
	// Reverse(p, 3)
	GreedySorting(p)
}

twoBreakPointSorting_helpers.go: 
/*
Code Challenge: Solve the 2-Break Distance Problem.

Input: Genomes P and Q.
Output: The 2-break distance d(P, Q).
*/
package main

import "fmt"

// returns the number of blocks in chromosome P
func NumBlocks(P [][]int) int {
	count := 0
	for i := range P {
		count += len(P[i])
	}
	return count
}

/*
Input: A chromosome Chromosome containing n synteny blocks.
Output: The sequence Nodes of integers between 1 and 2n resulting from applying ChromosomeToCycle to Chromosome.*/
func ChromosomeToCycle(chromosome []int) []int {
	nodes := make([]int, 0)
	for _, block := range chromosome {
		if block < 0 {
			nodes = append(nodes, -block*2, -block*2-1)
		} else {
			nodes = append(nodes, block*2-1, block*2)
		}
	}
	return nodes
}

// returns the cycles formed by the input edges E
func GetCycles(RedE, BlueE [][]int) [][]int {
	RE := CopyEdges(RedE)
	BE := CopyEdges(BlueE)

	cycles := make([][]int, 0)
	for len(RE) > 0 && len(BE) > 0 {

		// find one cycle
		cycle := make([]int, 0)
		cycle = append(cycle, BE[0][0], BE[0][1])
		currentNode := cycle[1]
		BE = remove(BE, 0)

		for cycle[len(cycle)-1] != cycle[0] {
			for i, e := range RE {
				// check whether either side of the edge matches with the current node
				if e[0] == currentNode {
					cycle = append(cycle, e[1])
					currentNode = e[1]
					RE = remove(RE, i)
					break
				} else if e[1] == currentNode {
					cycle = append(cycle, e[0])
					currentNode = e[0]
					RE = remove(RE, i)
					break
				}
			}

			for i, e := range BE {
				// check whether either side of the edge matches with the current node
				if e[0] == currentNode {
					cycle = append(cycle, e[1])
					currentNode = e[1]
					BE = remove(BE, i)
					break
				} else if e[1] == currentNode {
					cycle = append(cycle, e[0])
					currentNode = e[0]
					BE = remove(BE, i)
					break
				}
			}
		}
		cycles = append(cycles, cycle)
	}
	return cycles
}

/*
// Input: The colored edges ColoredEdges of a genome graph. (consider only the red and black edges: RE & BKE)
// Output: The genome P corresponding to this genome graph.
*/
func GraphToGenome(RedE, BlackE [][]int) [][]int {
	RE := CopyEdges(RedE)
	BKE := CopyEdges(BlackE)

	// find all cycles
	// for each cycle, run CycleToChromosome

	cycles := make([][]int, 0)
	for len(RE) > 0 && len(BKE) > 0 {

		// find one cycle
		cycle := make([]int, 0)
		cycle = append(cycle, BKE[0][0], BKE[0][1])
		currentNode := cycle[1]
		BKE = remove(BKE, 0)

		for cycle[len(cycle)-1] != cycle[0] {
			for i, e := range RE {
				// check whether either side of the edge matches with the current node
				if e[0] == currentNode {
					cycle = append(cycle, e[1])
					currentNode = e[1]
					RE = remove(RE, i)
					break
				} else if e[1] == currentNode {
					cycle = append(cycle, e[0])
					currentNode = e[0]
					RE = remove(RE, i)
					break
				}
			}

			for i, e := range BKE {
				// check whether either side of the edge matches with the current node
				if e[0] == currentNode {
					cycle = append(cycle, e[1])
					currentNode = e[1]
					BKE = remove(BKE, i)
					break
				} else if e[1] == currentNode {
					cycle = append(cycle, e[0])
					currentNode = e[0]
					BKE = remove(BKE, i)
					break
				}
			}
		}
		cycles = append(cycles, cycle)
	}

	chromosomes := make([][]int, 0)
	for _, cycle := range cycles {
		chromosomes = append(chromosomes, CycleToChromosome(cycle))
	}

	return chromosomes
}

func CopyEdges(E [][]int) [][]int {
	copy := make([][]int, len(E))
	for i := range E {
		copy[i] = make([]int, len(E[i]))
		for j := range E[i] {
			copy[i][j] = E[i][j]
		}
	}
	return copy
}

/*
input: a set of edges
output: a sequence of nodes
*/
func EdgesToNodes(E [][]int) []int {
	e := make([]int, 0)
	for _, edge := range E {
		for _, node := range edge {
			e = append(e, node)
		}
	}
	return e
}

/*
Input: A sequence Nodes of integers between 1 and 2n
Output: The chromosome Chromosome containing n synteny blocks resulting from applying CycleToChromosome to Nodes.
*/
func CycleToChromosome(n []int) []int {
	chromosome := make([]int, len(n)/2)

	for i := 0; i < len(chromosome); i++ {
		// compare 2i and 2i+1
		if n[2*i+1] > n[2*i] {
			chromosome[i] = n[2*i+1] / 2
		} else {
			chromosome[i] = -n[2*i] / 2
		}
	}
	return chromosome
}

// // returns a set of edges (one edge is represented by a size-2 array) formed by the chromosome P
func ColoredEdges(P [][]int) [][]int {
	E := make([][]int, 0)
	// for each chromosome in P:
	for _, chromosome := range P {
		nodes := ChromosomeToCycle(chromosome)
		for j := 0; j < len(chromosome)-1; j++ {
			edge := []int{nodes[2*j+1], nodes[2*j+2]}
			E = append(E, edge)
		}
		// add the last edge
		E = append(E, []int{nodes[len(nodes)-1], nodes[0]})
	}
	return E
}

// returns the cycles in P, Q
func TwoBreakDist(P, Q [][]int) [][]int {
	redEdges := ColoredEdges(P)
	blueEdges := ColoredEdges(Q)
	E := append(redEdges, blueEdges...)

	// fmt.Println(E)
	cycles := make([][]int, 0)
	for len(E) > 0 {
		// find one cycle
		cycle := make([]int, 0)
		cycle = append(cycle, E[0][0], E[0][1])
		currentNode := cycle[1]
		E = remove(E, 0)
		for cycle[len(cycle)-1] != cycle[0] {
			for i, e := range E {
				// fmt.Println(i, currentNode, len(E))
				// check whether either side of the edge matches with the current node
				if e[0] == currentNode {
					cycle = append(cycle, e[1])
					currentNode = e[1]
					E = remove(E, i)
					break
				} else if e[1] == currentNode {
					cycle = append(cycle, e[0])
					currentNode = e[0]
					E = remove(E, i)
					break
				}
			}
		}
		// fmt.Println(cycle)
		// fmt.Println(E)

		cycles = append(cycles, cycle)
	}

	return cycles
}

// find one cycle from the set of edges; returns the cycle and the remaining edges (having removed those edges that make the cycle)
func FindOneCycle(E [][]int) ([]int, [][]int) {
	// start with the first edge of E as the first edge of the cycle
	cycle := make([]int, 0)
	cycle = append(cycle, E[0][0], E[0][1])
	currentNode := cycle[1]
	E = remove(E, 0)
	for cycle[len(cycle)-1] != cycle[0] {
		for i, e := range E {
			// check whether either side of the edge matches with the current node
			if e[0] == currentNode {
				cycle = append(cycle, e[1])
				currentNode = e[1]
				E = remove(E, i)
			} else if e[1] == currentNode {
				cycle = append(cycle, e[0])
				currentNode = e[0]
				E = remove(E, i)
			}
		}
	}
	return cycle, E
}

// remove the element at indedx i from l
func remove(l [][]int, i int) [][]int {
	if i >= len(l) {
		fmt.Println(i, len(l))
		panic("cannot remove becasue index is out of range")
	}
	if i == 0 {
		return l[1:]
	} else if i == len(l)-1 {
		return l[:len(l)-1]
	} else {
		return append(l[:i], l[i+1:]...)
	}
}

func PrintGenome(P [][]int) {
	for i := range P {
		fmt.Print("(")
		for j := range P[i] {
			if P[i][j] > 0 {
				fmt.Print("+", P[i][j])
			} else {
				fmt.Print(P[i][j])
			}
			if j != len(P[i])-1 {
				fmt.Print(" ")
			}
		}
		fmt.Print(")")
	}
	fmt.Println()
}

twoBreakSorting_main.go: 

/*
2-Break Sorting Problem: Find a shortest transformation of one genome into another by 2-breaks.

Input: Two genomes with circular chromosomes on the same set of synteny blocks.
Output: The sequence of genomes resulting from applying a shortest sequence of 2-breaks transforming one genome into the other.
*/
package main

import (
	"os"
	"strconv"
	"strings"
)

// returns the input permutation as an array of int
func ReadInput(input string) ([][]int, [][]int) {
	content, err := os.ReadFile(input)
	if err != nil {
		panic("cannot open file")
	}
	contentStr := string(content)
	lines := strings.Split(contentStr, "\n")

	pstr := lines[0][1 : len(lines[0])-1]
	qstr := lines[1][1 : len(lines[1])-1]

	pstrlist := strings.Fields(pstr)
	qstrlist := strings.Fields(qstr)

	P := make([][]int, 1)
	Q := make([][]int, 1)
	for _, blockStr := range pstrlist {
		block, err := strconv.Atoi(blockStr[1:])
		if err != nil {
			panic("cannot convert string to int")
		}
		if blockStr[0] == '-' {
			block = -block
		}
		P[0] = append(P[0], block)
	}

	for _, blockStr := range qstrlist {
		block, err := strconv.Atoi(blockStr[1:])
		if err != nil {
			panic("cannot convert string to int")
		}
		if blockStr[0] == '-' {
			block = -block
		}
		Q[0] = append(Q[0], block)
	}

	return P, Q
}

func TwoBDSort(P, Q [][]int) {
	// goal: sort P so that it matches with Q
	// general approach to solution:
	// keep track of the red edges of the cycle
	// select a pair of red edges and apply two-break
	// check if the resulting graph has one more cycle
	// terminate when the number of cycles is equal the number of blocks

	RE := ColoredEdges(P)
	BE := ColoredEdges(Q)
	BKE := BlackEdges(Q)

	cycles := TwoBreakDist(P, Q)
	// TBD: two break distance
	TBD := NumBlocks(P) - len(cycles)

	PrintGenome(P)
	// we need TBD number of two-break operations to make P match Q
	for i := 0; i < TBD; i++ {
		var i1, i2 int
		cycles := GetCycles(RE, BE)
		// get the group of red edges to choose from
		for _, cycle := range cycles {
			if len(cycle) > 3 {
				// fmt.Println(cycle)
				redEdgeIndicesOfCycle := GroupEdges(RE, cycle)
				i1 = redEdgeIndicesOfCycle[0]
				i2 = redEdgeIndicesOfCycle[1]
				break
			}
		}
		// perform twobreak operation
		RE = TwoBreakOnGenome(RE, BE, BKE, i1, i2)

		genome := GraphToGenome(RE, BKE)
		PrintGenome(genome)
	}
}

// returns the list of indices of edges in E that form the cycle
func GroupEdges(E [][]int, cycle []int) []int {
	edgeIndices := make([]int, 0)
	for i := 0; i < len(cycle)-1; i++ {
		e := []int{cycle[i], cycle[i+1]}

		edgeIndex := ContainsEdge(E, e)
		if edgeIndex != -1 {
			edgeIndices = append(edgeIndices, edgeIndex)
		}
	}
	return edgeIndices
}

// checks whether E contains e
func ContainsEdge(E [][]int, e []int) int {
	for i, v := range E {
		if (e[0] == v[0] && e[1] == v[1]) || (e[1] == v[0] && e[0] == v[1]) {
			return i
		}
	}
	return -1
}

/*
Input: The red edges of a genome graph GenomeGraph, followed by indices of two edges: i1 i2
Output: The red edges of the genome graph resulting from applying the 2-break operation 2-BreakOnGenomeGraph(GenomeGraph, i1 , i2).
*/
func TwoBreakOnGenome(RedE, BlueE, BlackE [][]int, i1, i2 int) [][]int {
	numCycles := len(GetCycles(RedE, BlueE))

	// 1,2 3,4 -> 1,3 2,4 | 1,4 2,3
	tmp := RedE[i1][1]
	RedE[i1][1] = RedE[i2][0]
	RedE[i2][0] = tmp

	newNumCycles := len(GetCycles(RedE, BlueE))

	if newNumCycles > numCycles {
		// print the new genome  * we need the black edges
		// genome := GraphToGenome(RedE, BlackE)
		// PrintGenome(genome)
		return RedE
	} else {
		// switch back first
		tmp := RedE[i1][1]
		RedE[i1][1] = RedE[i2][0]
		RedE[i2][0] = tmp
		// switch the other way
		tmp = RedE[i1][1]
		RedE[i1][1] = RedE[i2][1]
		RedE[i2][1] = tmp

		// genome := GraphToGenome(RedE, BlackE)
		// PrintGenome(genome)
		return RedE
	}
}

// obtain the black edges
func BlackEdges(P [][]int) [][]int {
	E := make([][]int, 0)
	for i := range P {
		for _, block := range P[i] {
			e := make([]int, 2)
			if block > 0 {
				e[0] = 2*block - 1
				e[1] = 2 * block
			} else {
				block = -block
				e[0] = 2 * block
				e[1] = 2*block - 1
			}
			E = append(E, e)
		}
	}

	return E
}

func main() {
	input := "input1.txt"
	P, Q := ReadInput(input)
	TwoBDSort(P, Q)
}